#version 330

uniform samplerCube cubeMap;
uniform float far;
uniform float w_light;
#define BIAS 0.01

uniform vec3 coords[32] =vec3[32](
vec3(-0.444022926396, -0.718809721456, 0.534935720602) ,
vec3(-0.0988614219419, 0.776268694607, 0.622602066352) ,
vec3(-0.0579791422005, -0.756963787612, -0.650879592024) ,
vec3(-0.623913764871, 0.722326610178, -0.298288253597) ,
vec3(0.0897988926551, -0.0857085495976, 0.992265188044) ,
vec3(-0.11694429657, 0.944718720123, -0.306317762053) ,
vec3(0.160711066536, -0.985995806096, -0.0445446231688) ,
vec3(-0.712024604516, -0.562050122038, -0.420857010018) ,
vec3(-0.00485584147269, -0.0939449963349, -0.995565547047) ,
vec3(0.602028981257, -0.537697193422, 0.590290465715) ,
vec3(-0.584140503633, 0.727639737842, 0.359611295609) ,
vec3(-0.608500287476, 0.217180537891, -0.763256191657) ,
vec3(0.0276935185935, 0.484692767354, -0.874245955268) ,
vec3(0.743479232365, -0.507800110724, -0.435175457247) ,
vec3(-0.628078168855, 0.327934848927, 0.705674534518) ,
vec3(-0.403123784775, -0.893366706064, -0.198461942562) ,
vec3(-0.804647063563, -0.581466588543, 0.120165342372) ,
vec3(0.431054036937, 0.441480077068, 0.786948383817) ,
vec3(0.835023754483, 0.219864800939, 0.504375652423) ,
vec3(0.460575089459, 0.791150664246, 0.402431625787) ,
vec3(0.463882953187, 0.685530320444, -0.561124572171) ,
vec3(-0.416114769284, -0.115842398184, 0.901903008958) ,
vec3(0.0857860589526, -0.702356109605, 0.706637564378) ,
vec3(0.881155625501, 0.27697391746, -0.383210402643) ,
vec3(-0.919324916399, 0.11272384259, -0.37700800177) ,
vec3(0.75842366147, 0.651720589345, 0.00733642600422) ,
vec3(-0.96837426152, -0.0909150185495, 0.232348335539) ,
vec3(0.936612674505, -0.337207172654, 0.0951210842426) ,
vec3(0.318303952189, -0.44787431784, -0.835518515319) ,
vec3(-0.391093403256, -0.395809255147, -0.830891679745) ,
vec3(-0.897352727681, 0.433280063145, 0.0838240359641) ,
vec3(0.548498539257, 0.2368849857, -0.801894541685) );


float CalculateShadowFactor(vec3 worldPos, vec3 lightPos)
{
	float sf = 0.0f;
	for (int i =0; i< 32;++i)
		{
		vec3 vert_to_light = worldPos - lightPos +coords[i]*w_light;
		float cm_depth = texture(cubeMap,vert_to_light).r;
		float depth = length(vert_to_light);
		cm_depth *= far;
	
		if(cm_depth + BIAS*depth  >= depth)
		{
			sf += 1.0f;
		}
	}
	return sf / 32.0f;
}
